
# Author: Leonie KÃ¼chenhoff
# Date: Sep 01st, 2022
# Snakemake workflow to normalize, filter, and merge vcf files from differnt tissues and variant callers into one txt file.
# call conda activate ../variant_calling/envs/smake

import os 
import pandas as pd

helper_scripts = str(os.getcwd())
configfile: str(helper_scripts+ "/config/config.json")

print(os.getcwd())
snp_path = config["snp_path"]
mgp_path1 = config["mgp_path1"]
mgp_path2 = config["mgp_path2"]
input_dir = config["inputdir"]
refseq = config["reference_seq"]
annodir = os.path.dirname(refseq)

#SAMPLE, VARCALLER =  map(set, glob_wildcards('{{input_dir}}/HLT{sample, [0-9]+}.{varcaller}.vcf.gz'))
units = pd.read_table(config["samplesheet"], dtype=str).set_index(["sample"], drop=False)
SAMPLE = units["individual"].unique().tolist()
TISSUE = units["tissue"].unique().tolist()

outdir = config["outdir"]
os.chdir(outdir)

onstart:
    print("##### Creating output subfolders #####\n") 
    shell("mkdir -p plots")
    shell("mkdir -p lofreq_scalpel/filtered")
    shell("mkdir -p lofreq_scalpel/normalized")
    shell("mkdir -p lofreq_scalpel/sorted")
    shell("mkdir -p variant_caller_out/normalized")
    shell("mkdir -p merged/reheader")
    shell("mkdir -p merged/txt_files")
    shell("mkdir -p merged/txt_files/ad_hc_mu")
    shell("mkdir -p known_variants_vcfs/overlap")
    shell("mkdir -p known_variants_vcfs/normalized")
    shell("mkdir -p annovar_anno/density_filter")
    shell("mkdir -p annovar_anno/density_filter")
    shell("mkdir -p variant_caller_out/filtered")
    shell("mkdir -p variant_caller_out/normalized")
    print("##### Creating log subfolders #####\n")
    shell("mkdir -p jobs/passfilter")
    shell("mkdir -p jobs/passfilter_ls")
    shell("mkdir -p jobs/norm_ls")
    shell("mkdir -p jobs/gt_annotator")
    shell("mkdir -p jobs/merge_ls_sep")
    shell("mkdir -p jobs/reheader")
    shell("mkdir -p jobs/sort")
    shell("mkdir -p jobs/concat")
    shell("mkdir -p jobs/merge2")
    shell("mkdir -p jobs/norm3")
    shell("mkdir -p jobs/make_txt")
    shell("mkdir -p jobs/det_overlap")
    shell("mkdir -p jobs/concat_db_entries")
    shell("mkdir -p jobs/norm_db_entries1")
    shell("mkdir -p jobs/norm_db_entries2")
    shell("mkdir -p jobs/create_filter_tables")
    shell("mkdir -p jobs/annotation")

rule all:
    input:
        expand('merged/txt_files/ad_hc_mu/HLT{sample}.specific.txt', sample = SAMPLE),
        expand('annovar_anno/density_filter/HLT{sample}.merged.mm10_multianno.txt', sample = SAMPLE),
        'known_variants_vcfs/normalized/sorted/mouse.dbsnp.chr.sort.vcf.gz', 
        'known_variants_vcfs/normalized/sorted/mgp.v5.snps.indels.dbSNP142.pass.chr.sort.vcf.gz'





rule passfilter:
    # only variants with high quality are kept 
    input:
        input_dir + '/vcf/HLT{sample}.{varcaller}.fil.vcf'
    output:
        filter = 'variant_caller_out/filtered/HLT{sample}.{varcaller}.vcf.gz',
        norm = 'variant_caller_out/normalized/HLT{sample}.{varcaller}.vcf.gz'
    wildcard_constraints:
        sample = '[0-9]+',
        varcaller = '[A-Z]+'
    params:
        refseq = refseq
    threads:
        1
    shell:
        '''
        bgzip {input} --keep
        bcftools filter --exclude \'FILTER!="PASS"\' -O z -o {output.filter} {input}.gz
        bcftools norm -m-both -c w -f {params.refseq} -O z -o {output.norm} {output.filter}
        tabix -p vcf {output.norm}
        '''

rule passfilter_ls:
    # only variants with high quality are kept for lofreq / scalpel sample
    input:
        input_dir + '/vcf/{tissue}{sample}.{varcaller}.fil.vcf'
    output:
        'lofreq_scalpel/filtered/{tissue}{sample}.{varcaller}.vcf.gz'
    wildcard_constraints:
        sample = '[0-9]+',
        tissue = '[A-Z]',
        varcaller = '[A-Z]+'
    threads:
        1
    shell:
        '''
        bgzip {input} --keep
        bcftools filter --exclude \'FILTER!="PASS"\' -O z -o {output} {input}.gz
        tabix -p vcf {output}
        '''

rule norm_ls:
    # normalize variant notation
    input:
        file = 'lofreq_scalpel/filtered/{tissue}{sample}.{varcaller}.vcf.gz'
    output:
        'lofreq_scalpel/normalized/{tissue}{sample}.{varcaller}.vcf.gz'
    wildcard_constraints:
        sample = '[0-9]+',
        tissue = '[A-Z]',
        varcaller = '[A-Z]+'
    params:
        refseq = refseq
    threads: 
        1
    shell:
        '''
        bcftools norm -m-both -c w -f {params.refseq} -O z -o {output} {input.file}
        tabix -p vcf {output}
        '''

rule gt_annotator:
#lofreq does not contain gt column, so it needs to be added
    input:
        file = 'lofreq_scalpel/normalized/{tissue}{sample}.LF.vcf.gz'
    output:
        'lofreq_scalpel/normalized/{tissue}{sample}.lofreqgt.vcf.gz'
    wildcard_constraints:
        sample = '[0-9]+',
        tissue = '[A-Z]'
    threads: 
        1
    shell:
        '''
        vcf-genotype-annotator {input.file} {wildcards.tissue}{wildcards.sample} 0/1 -o {output}
        tabix -p vcf {output}
        '''

rule merge_ls_sep:
    # merge tissues from same mouse into one file
    input:
        files = expand('lofreq_scalpel/normalized/{tissue}{{sample}}.{{varcaller}}.vcf.gz', tissue = TISSUE)
    output:
        'lofreq_scalpel/normalized/HLT{sample}.{varcaller}_w.vcf.gz'
    wildcard_constraints:
        sample = '[0-9]+',
        tissue = '[A-Z]',
        varcaller = '[a-zA-Z]+'
    threads: 
        1
    shell:
        '''
        bcftools merge -O z --force-samples {input.files} -o {output}
        '''


rule reheader:
    # change header to sample names
    input:
        'lofreq_scalpel/normalized/HLT{sample}.{varcaller}_w.vcf.gz'
    output:
        reheader = 'lofreq_scalpel/normalized/HLT{sample}.{varcaller}_rehead.vcf.gz',
        norm = 'lofreq_scalpel/normalized/HLT{sample}.{varcaller}_reheadnorm.vcf.gz'
    wildcard_constraints:
        sample = '[0-9]+',
        varcaller = '[a-zA-Z]+'
    threads: 
        1
    params:
        helper_scripts = helper_scripts, 
        refseq = refseq
    shell:
        '''
        bcftools reheader --samples {params.helper_scripts}/header/header_names{wildcards.sample}.txt {input} -o {output.reheader}
        bcftools norm -m-both -c w -f {params.refseq} -O z -o {output.norm} {output.reheader}
        '''

rule sort:
    # sort variants
    input:
        'lofreq_scalpel/normalized/HLT{sample}.{varcaller}_reheadnorm.vcf.gz'
    output:
        'lofreq_scalpel/sorted/HLT{sample}.{varcaller}.vcf.gz'
    wildcard_constraints:
        sample = '[0-9]+',
        varcaller = '[a-zA-Z]+'
    threads: 
        1
    shell:
        '''
        bcftools sort {input} -O z -o {output}
        tabix -p vcf {output}
        '''



rule concat:
    # concatenate scalpel and lofreq output as one calls only snv, the other one indels
    input:
        files = expand('lofreq_scalpel/sorted/HLT{{sample}}.{varcaller}.vcf.gz', varcaller = ['SC', 'lofreqgt'])
    output:
        'variant_caller_out/normalized/HLT{sample}.LS.vcf.gz'
    wildcard_constraints:
        sample = '[0-9]+'
    threads: 
        1
    shell:
        '''
        bcftools concat -a {input.files} -O z -o {output}
        tabix -p vcf {output}
        '''


rule merge2:
    # merge files from all variant callers
    input:
        files = expand('variant_caller_out/normalized/HLT{{sample}}.{varcaller}.vcf.gz', varcaller = ['HC', 'MT', 'LS']),
    output:
        'merged/HLT{sample}_un.vcf.gz'
    wildcard_constraints:
        sample = '[0-9]+'
    threads: 
        1
    shell:
        '''
        bcftools merge --regions chr1,chr10,chr11,chr12,chr13,chr14,chr15,chr16,chr17,chr18,chr19,chr2,chr3,chr4,chr5,chr6,chr7,chr8,chr9,chrX,chrY -O z -m none --force-samples {input.files} -o {output}
        '''


rule norm3:
    # normalize variant notation
    input:
        'merged/HLT{sample}_un.vcf.gz'
    output:
        norm = 'merged/HLT{sample}.vcf.gz',
        reheader = 'merged/reheader/HLT{sample}.vcf.gz'
    wildcard_constraints:
        sample = '[0-9]+'
    params:
        helper_scripts = helper_scripts,
        refseq = refseq
    threads: 
        1
    shell:
        '''
        bcftools norm -m-both -c w -f {params.refseq} -O z -o {output.norm} {input}
        bcftools reheader --samples {params.helper_scripts}/header/headernames.txt {output.norm} -o {output.reheader}
        '''


rule make_txt:
    # convert vcf files to txt files for easier handling with subsequent analysis
    input:
        'merged/reheader/HLT{sample}.vcf.gz'
    output:
        'merged/txt_files/HLT{sample}.merged.txt'
    wildcard_constraints:
        sample = '[0-9]+'
    params:
        helper_scripts = helper_scripts 
    threads: 
        1
    shell:
        '''
        perl {params.helper_scripts}/scripts/vcf_to_AFtable.pl -in {input} -out {output} -s "AD|h_mu,l_mu,t_mu,h_hc,l_hc,t_hc" -s "GT|h_hc,l_hc,t_hc,h_mu,l_mu,t_mu,h_ls,l_ls,t_ls"
        '''

rule concat_db_entries:
    # prepare database entries step 1: concatenate mgp entries into one file
    input:
        mgp_indel = mgp_path1,
        mgp_snp = mgp_path2
    output:
        merged = 'known_variants_vcfs/mgp.v5.snps.indels.dbSNP142.pass.chr.sort.vcf.gz'
    threads:
        1
    shell:
        '''
        bcftools concat -a {input.mgp_indel} {input.mgp_snp} -o {output.merged}
        '''


rule norm_db_entries1:
    # to be able to make a comparison, db entries are normalized
    input:
        'known_variants_vcfs/mgp.v5.snps.indels.dbSNP142.pass.chr.sort.vcf.gz'
    output: 
        sort = 'known_variants_vcfs/normalized/sorted/mgp.v5.snps.indels.dbSNP142.pass.chr.sort.vcf.gz',
        norm = 'known_variants_vcfs/normalized/mgp.v5.snps.indels.dbSNP142.pass.chr.sort.vcf.gz',
        txt_mgp = 'known_variants_vcfs/normalized/sorted/mgp.txt'
    params:
        refseq = refseq
    threads:
        1
    shell:
        '''
        bcftools norm -m-both -c w -f {params.refseq} -O z -o {output.sort} {input}
        bcftools sort {output.sort} -O z -o {output.norm}
        bcftools query -f '%CHROM\t%POS\t%REF\t%ALT\n' --output {output.txt_mgp} {output.norm}
        '''


rule norm_db_entries2:
    # to be able to make a comparison, db entries are normalized
    input:
        snp_path
    output: 
        sort = 'known_variants_vcfs/normalized/sorted/mouse.dbsnp.chr.sort.vcf.gz',
        norm = 'known_variants_vcfs/normalized/mouse.dbsnp.chr.sort.vcf.gz',
        txt_dbsnp = 'known_variants_vcfs/normalized/sorted/dbsnp.txt'
    params:
        refseq = refseq
    threads:
        1
    shell:
        '''
        bcftools norm -m-both -c w -f {params.refseq} -O z -o {output.sort} {input}
        bcftools sort {output.sort} -O z -o {output.norm}
        bcftools query -f '%CHROM\t%POS\t%REF\t%ALT\n' --output {output.txt_dbsnp} {output.norm}
        '''


rule det_overlap:
    # determine which variants overlap with database entries
    input:
        main = 'merged/txt_files/HLT{sample}.merged.txt'
    output:
        mgp = 'known_variants_vcfs/overlap/{sample}_mgp_overlap.txt',
        dbsnp = 'known_variants_vcfs/overlap/{sample}_dbsnp_overlap.txt',
        remdup = 'merged/txt_files/HLT{sample}.merged.remdup.txt'
    wildcard_constraints:
        sample = '[0-9]+'
    params:
        opath = 'known_variants_vcfs/overlap/{sample}',
        helper_scripts = helper_scripts,
        snp_path = 'known_variants_vcfs/normalized/sorted/mouse.dbsnp.chr.sort.vcf.gz', 
        mgp_path = 'known_variants_vcfs/normalized/sorted/mgp.v5.snps.indels.dbSNP142.pass.chr.sort.vcf.gz'
    threads: 
        1
    shell:
        '''
        python3 {params.helper_scripts}/scripts/db_entry_overlap.py -s {input.main} -o {params.opath} --mgp {params.mgp_path} --dbsnp {params.snp_path}
        '''

rule create_filter_tables:
    # create txt files with filtered variants
    input:
        remdup = expand('merged/txt_files/HLT{sample}.merged.remdup.txt', sample = SAMPLE)
    output:
        specific = expand('merged/txt_files/ad_hc_mu/HLT{sample}.specific.txt', sample = SAMPLE)
    wildcard_constraints:
        sample = '[0-9]+'
    params:
        helper_scripts = helper_scripts 
    threads: 
        1
    shell:
        '''
        python3 {params.helper_scripts}/scripts/create_filter_tables.py
        '''

rule annotation:
    #script to add genome annotation to vcf file
    input:
        'merged/reheader/HLT{sample}.vcf.gz'
    output:
        'annovar_anno/density_filter/HLT{sample}.merged.mm10_multianno.txt'
    params:
        helper_scripts = helper_scripts,
        outdir = 'annovar_anno/density_filter/HLT{sample}.merged',
        annodir = annodir
    wildcard_constraints:
        sample = '[0-9]+'
    shell:
        '''
        zcat {input} | perl {params.helper_scripts}/scripts/annovar/table_annovar.pl - {params.annodir} -buildver mm10 -out {params.outdir} -remove -protocol refGene -nastring . -operation g -vcfinput -polish
        '''